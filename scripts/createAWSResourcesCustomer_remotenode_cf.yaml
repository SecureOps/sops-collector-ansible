AWSTemplateFormatVersion: "2010-09-09"
Description: "Create User and Resources for Remote Node instance"
Parameters:
  CustomerName:
    Type: String
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    Description: Customer Name, only alphanumeric.
  RemoteNodeName:
    Type: String
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    Description: Remote Node Name, only alphanumeric.
  CustomerS3BucketName:
    Type: "String"
    AllowedPattern: "[a-z][a-z0-9]*"
    Description: "Customer S3 Bucket Name, only lower case alphanumeric."
Resources:
  sopsRemoteNodeUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub sopsCustomerRemoteNode-${CustomerName}
      Path: !Sub /sops/customer/${CustomerName}/
      Policies:
        - PolicyName: !Sub sopsCustomerPolicy-${CustomerName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                Resource:
                  - !Sub arn:aws:kinesis:${AWS::Region}:*:stream/sopsCustomer-${CustomerName}-*
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource:
                  - !Sub arn:aws:firehose:${AWS::Region}:*:deliverystream/sopsCustomer-${CustomerName}-*
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - cloudwatch:PutMetricData
                Resource:
                  - !Sub arn:aws:s3:::sopscustomer-${CustomerS3BucketName}
                  - !Sub arn:aws:s3:::sopscustomer-${CustomerS3BucketName}*
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
  sopsRemoteNodeKey:
    Type: AWS::IAM::AccessKey
    DependsOn: sopsRemoteNodeUser
    Properties:
      Serial: 0
      Status: Active
      UserName: !Sub sopsCustomerRemoteNode-${CustomerName}
  RemoteNodeCreds:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Read Only AWS API Token
      Name: !Sub ${CustomerName}-${RemoteNodeName}-RemoteNodeKey
      SecretString:
        "Fn::Join":
          - ""
          -
            - !Sub '{"access_key": "${sopsRemoteNodeKey}", "access_secret": "'
            - !GetAtt sopsRemoteNodeKey.SecretAccessKey
            - '"}'
