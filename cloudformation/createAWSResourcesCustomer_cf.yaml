AWSTemplateFormatVersion: "2010-09-09"
Description: "Create User and Resources for Secureops Customer logs shipping."
Parameters:
  CustomerName:
    Type: String
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    Description: Customer Name, only alphanumeric.
  CustomerS3BucketName:
    Type: "String"
    AllowedPattern: "[a-z][a-z0-9]*"
    Description: "Customer S3 Bucket Name, only lower case alphanumeric."
Resources:
  sopsRemoteNodeGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub sopsCustomer-${CustomerName}-RemoteNodeGroup
      Path: !Sub /sops/customers/${CustomerName}/

  sopsCollectorUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub sopsCollector-${CustomerName}
      Path: !Sub /sops/customers/${CustomerName}/
      Policies:
        - PolicyName: !Sub sopsCustomerROPolicy-${CustomerName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:PutItem
                  - dynamodb:DescribeTable
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:*:table/sopscustomer-${CustomerName}
              - Effect: Allow
                Action:
                  - kinesis:GetShardIterator
                  - kinesis:ListTagsForStream
                  - kinesis:DescribeStream
                  - kinesis:GetRecords
                Resource:
                  - !Sub arn:aws:kinesis:${AWS::Region}:*:stream/sopsCustomer-${CustomerName}-*
              - Effect: Allow
                Action:
                    - s3:GetBucketLocation
                    - s3:ListBucket
                    - s3:ListBucketMultipartUploads
                    - s3:AbortMultipartUpload
                Resource:
                  - !Sub arn:aws:s3:::sopscustomer-${CustomerS3BucketName}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:AbortMultipartUpload
                Resource:
                  - !Sub arn:aws:s3:::sopscustomer-${CustomerS3BucketName}*
  sopsCollectorKey:
    Type: AWS::IAM::AccessKey
    DependsOn: sopsCollectorUser
    Properties:
      Serial: 0
      Status: Active
      UserName: !Sub sopsCollector-${CustomerName}

  sopsCustomerSQSCommandQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: "alias/aws/sqs"
      QueueName: !Sub ${CustomerName}-AnsibleCommandQueue
      Tags:
        - Key: Name
          Value: !Sub ${CustomerName}-AnsibleCommandQueue
  s3bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub sopscustomer-${CustomerS3BucketName}
      VersioningConfiguration:
        Status: Enabled

  remoteNodeManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Basic remote node policy
      ManagedPolicyName: !Sub sopsCustomer-${CustomerName}-remote-nodes
      Path: !Sub /sops/customers/${CustomerName}/
      Groups:
        - !Ref sopsRemoteNodeGroup
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
            Resource:
              - !GetAtt s3bucket.Arn
              - !Sub ${s3bucket.Arn}*
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: "*"
          - Effect: "Allow"
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:SendMessage
            Resource:
              - !GetAtt sopsCustomerSQSCommandQueue.Arn
  CollectorCreds:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Read Only AWS API Token
      Name: !Sub ${CustomerName}-CollectorKey
      SecretString:
        "Fn::Join":
          - ""
          -
            - !Sub '{"access_key": "${sopsCollectorKey}", "access_secret":"'
            - !GetAtt sopsCollectorKey.SecretAccessKey
            - '"}'
Outputs:
  AnsibleSQSCommandQueueArn:
    Description: "ARN of SQS queue to be used to dispatch ansible playbooks"
    Value: !GetAtt sopsCustomerSQSCommandQueue.Arn
    Export:
      Name: !Sub "${CustomerName}-sopsCustomerSQSCommandQueueArn"
  AnsibleSQSCommandQueueUrl:
      Description: "URL of SQS queue to be used to dispatch ansible playbooks"
      Value: !Ref sopsCustomerSQSCommandQueue
      Export:
        Name: !Sub "${CustomerName}-sopsCustomerSQSCommandQueueUrl"
